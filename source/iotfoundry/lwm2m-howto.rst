.. highlight:: sh

.. _dm-lwm2m-demo:

=========================================
 LWM2M FOTA and Data Demonstration System
=========================================

.. todo:: add binary install instructions for all boards
.. todo:: add autogenerated flash layout for all boards

.. warning:: **Technology demonstration system only**.

             While the system described below works as documented, it
             may be **unstable**, and its behavior may change
             in the future.

Overview
========

This page documents how to set up and use an end-to-end IoT demonstration
system using OMA Lightweight M2M (LWM2M).  The system contains Zephyr-based
IoT devices, an IoT gateway, and a web application, Leshan, that is used as the
LWM2M server.  With Leshan you can issue commands, query data
and perform firmware over the air (FOTA) updates on the IoT device(s).

A block diagram of this system is shown here, and though it is not explicitly
shown, one or more IoT devices can connect to the network through the same
gateway.

.. figure:: /_static/dm-leshan/lwm2m-system-diagram.svg
   :alt: Device Management with LWM2M System Diagram
   :align: center
   :figwidth: 5in

Using this demonstration system, you can:

- See live data readings from your devices using the Leshan Web application.

- Send commands to the device, such as turning on and off the USR LED.

- Use Leshan to transfer the firmware image onto an IoT device and then
  initiate a firmware update.

Get the Hardware
================

To set up this system, you will need a Linux or macOS workstation
computer, one or more IoT devices, and an IoT gateway.

We currently recommend:

- `BLE Nano 2`_ as an IoT device
- `96Boards HiKey`_ as an IoT gateway, with `UART Serial
  Mezzanine`_ for console access

Source for other boards is provided on a best-effort basis.

Prepare the System
==================

This is broken down into the following steps.

- :ref:`dm-lwm2m-linux`
- :ref:`dm-lwm2m-gateway`
- :ref:`dm-lwm2m-leshan`
- :ref:`dm-lwm2m-zephyr`
- :ref:`dm-lwm2m-device`

.. _dm-lwm2m-linux:

1. Install the Linux microPlatform
----------------------------------

**Required Equipment**: IoT gateway and workstation to flash the board.

If you haven't already, follow :ref:`linux-getting-started` to install
the base microPlatform on a `96Boards HiKey`_.

If you don't have a HiKey, the Getting Started Guide contains
information for other boards, provided on a best-effort basis.

.. _dm-lwm2m-gateway:

2. Set up the IoT Gateway
-------------------------

**Required Equipment**: IoT gateway device and workstation to run `Ansible`_.

You'll now use Ansible to set up your IoT gateway to act as an LWM2M
network proxy for your IoT device. This will also give you access to a
Leshan server you will run on your workstation to communicate via LWM2M
with the IoT device through the gateway.

.. include:: iot-gateway-setup-common.include

- From the ``gateway-ansible`` repository, deploy the gateway
  containers to your IoT gateway.

  **Subscribers**::

    GW_HOSTNAME=XXX REGISTRY_PASSWD=<your-subscriber-token> ./iot-gateway.sh

  Setting REGISTRY_PASSWD to your subscriber token is necessary so
  your gateway device can log in to the container registry.

  **Public**::

    REGISTRY=hub.docker.com REGISTRY_USER=docker REGISTRY_PASSWD=docker \
       GW_HOSTNAME=XXX ./iot-gateway.sh

  The script assumes it's executing from the system where the Leshan
  server resides. If this isn't the case, you must additionally set
  the variable ``GITCI`` to the IP address of the host running the
  Leshan container.

Your gateway device is now ready for use.

.. _dm-lwm2m-leshan:

3. Set up Leshan
----------------

**Required Equipment**: workstation which supports `Docker`_.

The gateway containers provided by Open Source Foundries also include
a demonstration-grade Leshan server you can use for this system, which
you'll set up now.

If you haven't already, follow instructions in :ref:`iot-gateway` to
access the container registry. Then run a Leshan container **on your
workstation, not the gateway**:

**Subscribers** can run::

    docker run --restart=always -d -t -p 5683:5683/udp -p 5684:5684/udp \
      --read-only --tmpfs=/tmp -p 8081:8080 \
      --name leshan hub.foundries.io/leshan:latest

If this command fails, make sure to run ``docker login`` as described
in :ref:`iot-gateway`.

**Public**: to run the latest public release::

    docker run --restart=always -d -t -p 5683:5683/udp -p 5684:5684/udp \
      --read-only --tmpfs=/tmp -p 8081:8080 \
      --name leshan opensourcefoundries/leshan:latest

After running the Leshan container, visit http://localhost:8081/ to
load its web interface.

You can also browse the Security tab:

.. figure:: /_static/dm-leshan/leshan-security.png
   :align: center
   :width: 4in
   :alt: Leshan Administrator Interface

Your Leshan container is now ready for use.

.. _dm-lwm2m-zephyr:

4. Install the Zephyr microPlatform
-----------------------------------

**Required Equipment**: workstation to install the Zephyr microPlatform
development environment, and IoT device to test installation.

If you haven't already, follow the installation steps in the Zephyr
microPlatform :ref:`zephyr-getting-started` guide.

.. _dm-lwm2m-device:

5. Set up the IoT Device(s)
---------------------------

**Required Equipment**: IoT device and workstation to flash the
device.

If you're using `BLE Nano 2`_, build and flash the
demonstration application for this system::

  ./zmp build -b nrf52_blenano2 zephyr-fota-samples/dm-lwm2m
  ./zmp flash -b nrf52_blenano2 zephyr-fota-samples/dm-lwm2m

.. include:: pyocd.include

If you don't have a BLE Nano 2, information for other boards is provided
on a best-effort basis in :ref:`dm-lwm2m-devices`.

Use the System
==============

Now that your system is fully set up, it's time to check that sensor
data are being sent to the cloud, and do a FOTA update.

.. note::

   The Leshan user web interface is a simple web application, which does not
   provide a complete end-to-end device management system. Leshan's simplicity
   makes it a perfect demonstration and prototyping system for LWM2M devices.

Retrieve Data
-------------

When a device registers with the Leshan server, Leshan will automatically
render known object types on the web interface.  You can interact with the
objects by scrolling and clicking the buttons for the objects.

- Read device information

  To read the device information, simple scroll down to the
  corresponding device information object and select the 'READ' button.  If
  Leshan is able to communicate with your device you will see all of the
  available device information.

  .. figure:: /_static/dm-leshan/leshan-readinfo.png
     :align: center
     :width: 4in
     :alt: Read the device information in Leshan

- Read current state of temperature and light objects

  To read the current status of the Temperature and Light objects, scroll down
  to the light and temperature objects and select the READ button. You will
  see the state of these objects on the device similar to this figure.

  .. figure:: /_static/dm-leshan/leshan-readtemp-light.png
    :align: center
    :width: 4in
    :alt: Read the light settings in Leshan

- Change state of the light object

  To change the state of an object, simply use the leshan interface and select
  the 'write' button to bring up the appropriate interface for changing data.

  .. figure:: /_static/dm-leshan/leshan-changelight.png
      :align: center
      :width: 4in
      :alt: Write the light settings in Leshan

Initiate a Firmware Update
--------------------------

It's time to update the device firmware, using the Firmware Update
object view in Leshan.

To start the firmware update, we first write the location of the
file in the "Package URI" field. The length of the Package URI must
be less than 255 characters.

The URI must be hosted where it is routable from your device.  The
URI can be either coap:// or http://. One simple way for your
workstation to host an HTTP server on port 8000 with Python 3 is::

   $ cd outdir/zephyr-fota-samples/dm-lwm2m/nrf52_blenano2/app/
   $ python3 -m http.server

The update will then be available at::

   http://YOUR_WORKSTATION_IP:8000/dm-lwm2m-nrf52_blenano2-signed.bin

You can write it like so:

.. figure:: /_static/dm-leshan/leshan-packageuri.png
    :width: 4in
    :align: center

Once you send this message, the file will begin transferring to the
target.

Monitor for a Completed Transfer
--------------------------------

Click the "Observe" button in the State line of the Firmware Update
object:

.. figure:: /_static/dm-leshan/leshan-observeupdate1.png
    :width: 4in
    :align: center

The state values and their meanings are:

    * State == 0: Idle
    * State == 1: Downloading
    * State == 2: Downloaded
    * State == 3: Updating

If you're connected to the device console, you will see progress like
so::

  [0912360] [fota/lwm2m] [INF] firmware_block_received_cb: 77%
  [0920080] [fota/lwm2m] [INF] firmware_block_received_cb: 78%
  [0927350] [fota/lwm2m] [INF] firmware_block_received_cb: 79%
  [0931870] [lib/lwm2m_rd_client] [INF] do_update_reply_cb: Update callback (code:2.4)
  [0931870] [lib/lwm2m_rd_client] [INF] do_update_reply_cb: Update Done
  [0932510] [fota/lwm2m] [INF] firmware_block_received_cb: 80%
  [0939070] [fota/lwm2m] [INF] firmware_block_received_cb: 81%
  [0946090] [fota/lwm2m] [INF] firmware_block_received_cb: 82%
  [0951050] [fota/lwm2m] [INF] firmware_block_received_cb: 83%

Monitor the transfer until the State field is 2 (Downloaded):

.. figure:: /_static/dm-leshan/leshan-observeupdate2.png
    :width: 4in
    :align: center

The device console will display something like this::

  [1073870] [fota/lwm2m] [INF] firmware_block_received_cb: 98%
  [1078930] [fota/lwm2m] [INF] firmware_block_received_cb: 99%
  [1085540] [fota/lwm2m] [INF] firmware_block_received_cb: 100%

Execute the Update
------------------

After the device has downloaded the update file, initiate the update
by clicking on the "Exec" button on the Update line.

The device console logs messages as it resets into the bootloader,
MCUBoot, which will load the new image::

  [1171230] [fota/lwm2m] [DBG] firmware_update_cb: Executing firmware update
  [1171230] [fota/lwm2m] [INF] firmware_update_cb: Update Counter: current -1, update -1
  [1172260] [fota/lwm2m] [INF] reboot: Rebooting device
  [MCUBOOT] [INF] main: Starting bootloader
  [MCUBOOT] [INF] boot_status_source: Image 0: magic=good, copy_done=0xff, image_ok=0x1
  [MCUBOOT] [INF] boot_status_source: Scratch: magic=unset, copy_done=0x2f, image_ok=0xff
  [MCUBOOT] [INF] boot_status_source: Boot source: slot 0
  [MCUBOOT] [INF] boot_swap_type: Swap type: test
  [MCUBOOT] [INF] main: Bootloader chainload address offset: 0x8000
  [MCUBOOT] [INF] main: Jumping to the first image slot
  ***** BOOTING ZEPHYR OS v1.9.99 - BUILD: Nov  8 2017 22:04:52 *****
  [0000000] [fota/main] [INF] main: Linaro FOTA LWM2M example application
  [0000010] [fota/main] [INF] main: Device: nrf52_blenano2, Serial: 1ef8e685

When the update execution is complete, the device will register with
Leshan again.

Congratulations! You've just done your first FOTA update using this
system.

.. include:: reporting-issues.include

.. _BLE Nano 2:
   https://redbear.cc/product/ble-nano-kit-2.html

.. _96Boards HiKey:
   https://www.96boards.org/product/hikey/

.. _UART Serial Mezzanine:
   https://www.96boards.org/product/uartserial/

.. _Docker:
   https://www.docker.com/

.. _Ansible:
   https://www.ansible.com

.. _GitHub guide to SSH keys:
   https://help.github.com/articles/connecting-to-github-with-ssh/
