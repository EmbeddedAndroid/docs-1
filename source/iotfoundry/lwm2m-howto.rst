.. highlight:: sh

.. _dm-lwm2m-demo:

=========================================
 LWM2M FOTA and Data Demonstration System
=========================================

.. todo:: add binary install instructions for all boards
.. todo:: add autogenerated flash layout for all boards

.. warning:: **Technology demonstration system only**.

             While the system described below works as documented, it
             is **unstable**, and its behavior may change incompatibly
             in the future. It is also **not supported**.

Overview
========

This page documents how to set up and use a demonstration system
containing IoT devices and an IoT gateway, which can publish sensor
data from devices to the cloud and perform firmware over the air
(FOTA) updates of the device firmware.

A block diagram of this system is shown here. One or more IoT devices
can connect to the network through the same gateway.

.. figure:: /_static/dm-leshan/lwm2m-system-diagram.svg
   :alt: Device Management with LWM2M System Diagram
   :align: center
   :figwidth: 5in

Using this demonstration system, you can:

- See live temperature readings from your devices using the Leshan Web
  applications.

- Upload a cryptographically signed firmware image to a device
  management server.

- Use Leshan to transfer the firmware image onto an IoT device and then
  initiate a firmware update. The device will boot the update after checking
  its cryptographic signature.

.. _96Boards Nitrogen:
   http://www.96boards.org/product/nitrogen/

.. _96Boards HiKey:
   http://www.96boards.org/product/hikey/

.. _UART Serial Mezzanine:
   https://www.96boards.org/product/uartserial/

Get the Hardware
================

To set up this system, you will need a Linux or macOS workstation
computer, one or more IoT devices, and an IoT gateway.

We currently recommend:

- `96Boards Nitrogen`_ as an IoT device
- `96Boards HiKey`_ as an IoT gateway, with `UART Serial
  Mezzanine`_ for console access

Source for other boards is provided on a best-effort basis.

Prepare the System
==================

.. _Docker:
   https://www.docker.com/

.. _Ansible:
   https://www.ansible.com

.. _install Ansible:
   http://docs.ansible.com/ansible/latest/intro_installation.html

.. _GitHub guide to SSH keys:
   https://help.github.com/articles/connecting-to-github-with-ssh/

1. Set up Leshan
-----------------

**Required Equipment**: workstation which supports `Docker`_.

Follow these instructions to run a Leshan demonstration Docker container:

.. figure:: /_static/dm-leshan/Leshan-setup.png
   :align: center
   :width: 5in
   :alt: Leshan and dependencies

Start the container with the following command:

    docker run --restart=always -d -t --net=host \
      --read-only --tmpfs=/tmp -p 8081:80 \
      --name leshan linarotechnologies/leshan:latest

After running the Leshan container, visit http://localhost:8081/ to
load the administrative interface.

After logging in, your browser window should look like this:

.. figure:: /_static/dm-leshan/leshan-initial.png
   :align: center
   :alt: Leshan Administrator Interface

Your Leshan container is now ready for use.

2. Install the Linux MicroPlatform
----------------------------------

**Required Equipment**: IoT gateway and workstation to flash the board.

Follow :ref:`linux-getting-started` to set up a `96Boards HiKey`_
gateway for container-based application deployment.

If you don't have a HiKey, the Linux MicroPlatform Getting Started Guide
contains information for other boards, provided on a best-effort basis.

3. Set Up IoT Gateway
---------------------

Follow :ref:`big-getting-started` to setup a Basic IoT Gateway.

a. configure networking for your IoT gateway device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Now connect your IoT gateway to the network.

  You can connect a HiKey to a local WiFi network\ [#hikeyethernet]_
  from its serial console as follows::

    sudo nmcli device wifi connect <NetworkSSID> password <NetworkPassword>

  The default password to use with ``sudo`` is ``linaro``, but we
  recommend that you change it while setting up your gateway, before
  connecting it to the network.

  After connecting to the network, record the IP address of your
  gateway, GATEWAY_IP_ADDRESS, which you can obtain when using WiFi
  with::

    ip addr show wlan0 | grep -o 'inet [.0-9]*'

  (If you're using Ethernet, ``ip addr show`` will show all IP
  addresses on the system.)

- You can now copy your SSH key to the gateway in order to control it
  with Ansible. Do this with ``ssh-copy-id``::

    ssh-copy-id linaro@GATEWAY_IP_ADDRESS

  Use the same gateway password from the previous step.

b. Manually run the gateway containers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. todo:: add instructions for manually installing gateway containers

c. Use ansible to manage the gateway containers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Required Equipment**: IoT gateway and workstation to run Ansible.

You'll now use Ansible to set up your IoT gateway to act as a network
proxy for your IoT device to publish sensor data to CloudMQTT, and
fetch updates from hawkBit.

- First, `install Ansible`_, which will let you install and control
  containers on your IoT gateway via SSH from your workstation.

- If you don't already have one, you now need to create an SSH key on
  your workstation. If you've never done this before, the `GitHub
  guide to SSH keys`_ has useful instructions.


- Clone the ``gateway-ansible`` repository, which contains an Ansible
  playbook to set up the gateway for this system::

    git clone https://github.com/linaro-technologies/gateway-ansible

- From the ``gateway-ansible`` repository, deploy the gateway
  containers using the CloudMQTT information you recorded earlier::

    ansible-playbook -e "mqttuser=CLOUDMQTT_USER mqttpass=CLOUDMQTT_PASSWORD \
                         mqtthost=CLOUDMQTT_SERVER mqttport=CLOUDMQTT_PORT \
                         gitci=WORKSTATION_IP_ADDRESS tag=latest-arm64" \
                     -i GATEWAY_IP_ADDRESS, -u linaro iot-gateway.yml
                     --tags gateway

  WORKSTATION_IP_ADDRESS in the above command line is the IP address
  of the system which is running the hawkBit server you set up
  earlier.

5. Install RTOS MicroPlatform
-----------------------------

**Required Equipment**: workstation to install the RTOS MicroPlatform
development environment, and IoT device to test installation.

Install a RTOS MicroPlatform development environment by following
:ref:`rtos-getting-started`.

6. Set Up IoT Device(s)
-----------------------

**Required Equipment**: IoT device and workstation to flash the
device.

If you're using `96Boards Nitrogen`_, build and flash the
demonstration application::

  ./genesis build -b 96b_nitrogen zephyr-fota-samples/dm-lwm2m
  ./genesis flash -b 96b_nitrogen zephyr-fota-samples/dm-lwm2m

.. include:: pyocd.include

If you don't have a Nitrogen, information for other boards is provided
on a best-effort basis in the :ref:`Appendix <rtos-appendix-devices>`.

Use the System
==============

Now that your system is fully set up, it's time to check that sensor
data are being sent to the cloud, and do a FOTA update.

Retrieve Data
-------------

.. todo:: Add images and description on how to read lwm2m  objects using leshan

FOTA Updates
------------

Now let's perform a FOTA update. In the hawkBit server UI, you should
see the 96Boards device show up in the "Targets" pane. It will look
like this:

.. todo:: add 96b-target screen capture from leshan

.. figure:: /_static/dm-leshan/96b-target.png
   :align: center

   96Boards Nitrogen registered with Leshan.

It's time to upload a firmware binary to the server, and update it
using this UI.

.. todo:: add instructions to update device using lwm2m

Congratulations! You've just done your first FOTA update using this
system.

Known Issues
============

Issues and observations are logged within Linaro's `Bugzilla issue
tracker
<https://bugs.linaro.org/buglist.cgi?component=IoT%20end-to-end&list_id=12808&product=Linaro%20Technologies>`_.

.. rubric:: Footnotes

.. [#hikeyethernet]

   You can also use a USB Ethernet dongle.
