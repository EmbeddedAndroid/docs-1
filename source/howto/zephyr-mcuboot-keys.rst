.. _howto-mcuboot-keys:

Zephyr microPlatform MCUboot Key Provisioning HOWTO
===================================================

This page explains how to use your own firmware signing key pair to
secure the boot process on your Zephyr microPlatform devices.

Requirements
------------

You must have the Zephyr microPlatform installed on your system; see
instructions in :ref:`tutorial-zephyr` for details.

Any board supported by the Zephyr microPlatform can be used with these
instructions.

Generate Keys
-------------

From the Zephyr microPlatform installation directory, generate an RSA
2048 key pair by running:

.. code-block:: console

   $ ./mcuboot/scripts/imgtool.py keygen -k my-secret-key.pem -t rsa-2048

(This is the default key type used by MCUboot; if you configured
MCUboot differently, you need to adjust the ``-t`` option.)

.. important::

   The contents of the file my-secret-key.pem must be stored securely
   and kept secret.

Next, generate some C code containing the public key as an array:

.. code-block:: console

   $ ./mcuboot/scripts/imgtool.py getpub -k my-secret-key.pem

The output looks like this:

.. code-block:: c

   /* Autogenerated by imgtool.py, do not edit. */
   const unsigned char rsa_pub_key[] = {
           0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
           /* [additional lines omitted] */
           0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee,
   };
   const unsigned int rsa_pub_key_len = 270;

You will copy these values into the MCUboot source code.

Copy the Public Key Into the MCUboot Source Code
------------------------------------------------

Now open the file :file:`mcuboot/boot/zephyr/keys.c` in your
editor. Search for lines that look like this:

.. code-block:: c

   #if defined(MCUBOOT_SIGN_RSA)
   const unsigned char root_pub_der[] = {
       0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd1, 0x06, 0x08,
       /* Additional lines omitted. */
       0xc9, 0x02, 0x03, 0x01, 0x00, 0x01
   };
   const unsigned int root_pub_der_len = 270;
   }

Delete the elements of the ``root_pub_der`` array, and replace them
with the :file:`imgtool.py` output, like this:

.. code-block:: c

   #if defined(MCUBOOT_SIGN_RSA)
   const unsigned char root_pub_der[] = {
           0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
           /* [additional lines omitted] */
           0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee,
   };
   const unsigned int root_pub_der_len = 270;
   }

.. important::

   Make sure:

   - to change the **contents** of ``root_pub_der`` only, **not its name**.
   - the value of ``root_pub_der_len`` matches the ``rsa_pub_key_len``
     generated by :file:`imgtool.py`

Commit this change in Git and ensure you preserve it.

Build App With Custom MCUboot image
-----------------------------------

You can now rebuild your Zephyr microPlatform application binary,
along with a customized MCUboot binary which trusts your public
key. Here is an example building the ``zephyr-fota-samples/dm-lwm2m``
application for the ``nrf52_blenano2`` board using the :ref:`zmp
<ref-zephyr-zmp>` tool:

.. code-block:: console

   $ ./zmp build -K my-secret-key.pem -b nrf52_blenano2 zephyr-fota-samples/dm-lwm2m

The important files this generates are:

- A custom MCUboot binary which trusts your public key in
  :file:`outdir/zephyr-fota-samples/dm-lwm2m/nrf52_blenano2/mcuboot/zephyr/zephyr.bin`. Use
  this binary when flashing devices you are going to deploy to the
  field.

- A Zephyr binary which is signed with your private key in
  :file:`outdir/zephyr-fota-samples/dm-lwm2m/nrf52_blenano2/app/zephyr/dm-lwm2m-nrf52_blenano2-signed.bin`. You
  can distribute this binary in FOTA updates.

To verify your setup, flash the custom MCUboot to your board, along
with the signed binary into the main firmware image area. For example,
using the ``zmp`` tool:

.. code-block:: console

   ./zmp flash -b nrf52_blenano2 zephyr-fota-samples/dm-lwm2m

Appendix: Boot Process Overview
-------------------------------

If you're unfamiliar with the overall boot process, this section may
help.

When your Zephyr microPlatform device boots, MCUboot_ checks for a
cryptographically signed firmware update, then installs and runs it if
one is available. Simplified, the boot process looks like this:

.. figure:: /_static/howto/mcuboot-boot.png
   :align: center

   Zephyr microPlatform boot decision tree.

The firmware update signature check uses a public key stored in the
MCUboot binary running on the device. MCUboot checks that the firmware
update is signed by the corresponding private key before booting
it. This mitigates against attacks which try to boot untrusted
firmware on your device.

.. figure:: /_static/howto/device-flash.png
   :align: center

   Zephyr microPlatform device flash layout.

To make getting started easy, the MCUboot repository's source code
contains a default public key, along with its private key in a data
file. Since the private key is not secret, this is not secure to use
in production. When deploying your devices, you need to use your own
key pair, with a private key that you must keep secret.

(If you're new to these ideas, check out the `Public-key
cryptography`_ and `Digital signature`_ pages on Wikipedia.)

.. _MCUboot: https://mcuboot.com

.. _Public-key cryptography:
   https://en.wikipedia.org/wiki/Public-key_cryptography

.. _Digital signature:
   https://en.wikipedia.org/wiki/Digital_signature
