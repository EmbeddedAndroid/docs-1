.. _dm-hawkbit-mqtt-appendix:

========================================================
 Appendix to hawkBit FOTA and MQTT Demonstration System
========================================================

.. warning:: Content in this section is provided on a best-effort basis.

This document contains additional information related to the
:ref:`dm-hawkbit-mqtt-demo`.

.. _dm-hawkbit-mqtt-appendix-hawkbit:

Additional hawkBit Information
------------------------------

This section contains additional information for more complex use
cases or further development.

- Upstream Github: https://github.com/eclipse/hawkbit
- Data model: https://github.com/eclipse/hawkbit/wiki/Data-model
- Docker container: https://github.com/linaro-technologies/gitci-hawkbit-container
- Docker Hub: https://hub.docker.com/r/linarotechnologies/gitci-hawkbit-container/

Building Your Own Container
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. todo:: gitci-hawkbit-container should be versioned, not point at tip

If you wish to build your own hawkBit container, e.g. to use your own
passwords, first clone the gitci-hawkbit-container repository:

https://github.com/linaro-technologies/gitci-hawkbit-container

Then edit the gitci-hawkbit-container file application.properties,
changing any of the following:

- Default RabbitMQ username and password (spring.rabbitmq.username,
  spring.rabbitmq.password) (if different).

- MariaDB URL, username and password (spring.datasource.url,
  spring.datasource.username, spring.datasource.password), and the
  name of the database used.

- MongoDB URI (spring.data.mongodb).

- The Hawkbit password and user (hawkbit.server.ui.demo.password,
  hawkbit.server.ui.demo.user)

Now build the container image::

    docker build -t hawkbit --force-rm .

Hawkbit Restrictions
~~~~~~~~~~~~~~~~~~~~

Target can only install a distribution set.

Hawkbit's default configuration for OS/Firmware forces only one
Software Module per Distribution Set. The software module can contain
several artifacts, as long they don't contain the same file name.

We currently produce device-specific images based on the same source
(e.g. same base version).

**For discussion**: should we create one distribution set per device,
or should we modify the os distribution set type to allow multiple
software modules (that could then be hardware specific)?

Rest API
~~~~~~~~

The authentication header is a simply HTTP BA implementation. To use
the protected APIs, first generate your authentication credentials::

    echo -n "admin:admin" | base64

Then add your credentials as part of HTTP header::

    curl ... -H 'Authorization: Basic YWRtaW46YWRtaW4='

Rest Commands:

**Targets:**

- Reference:
  http://sp.apps.bosch-iot-cloud.com/documentation/rest-api/targets-api-guide.html

- List all targets::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' | jq .

- Create a new target (security token generated by the server)::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ {
      "controllerId" : "nitrogen123",
      "name" : "nitrogen123",
      "description" : "Nitrogen Description"
      } ]'

- Create a new target specifying a custom security token::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ {
      "controllerId" : "nitrogen123",
      "name" : "nitrogen123",
      "description" : "Nitrogen Description",
      "securityToken" : "2345678DGGDGFTDzztgf"
      } ]'

- Delete a target::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets/nitrogen123' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -X DELETE

- Retrieve details from a single target:::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets/nitrogen123' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' | jq .

- Assign a distribution set::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets/nitrogen123/assignedDS' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '{
      "forcetime" : 1472465267347,
      "id" : 1,
      "type" : "timeforced"
      }'

- Retrieve assigned distribution set::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets/nitrogen123/assignedDS' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' | jq .

**Distribution Sets:**

- Reference:
  http://sp.apps.bosch-iot-cloud.com/documentation/rest-api/distributionsets-api-guide.html

- List all distribution sets::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' | jq .

- Create a new distribution set::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ {
      "name" : "Zephyr 17.01",
      "description" : "Zephyr 17.01 Build",
      "version" : "1.5",
      "requiredMigrationStep" : false,
      "type" : "os"
      } ]'

- Delete a distribution set::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets/1' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -X DELETE

- Retrieve assigned software modules::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets/1/assignedSM' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' | jq .

- Assign a software module::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets/1/assignedSM' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ { "id" : 1 } ]'

- Retrieve assigned targets to a distribution set::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets/1/assignedTargets' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' | jq .

- Assign targets to a distribution set::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets/1/assignedTargets' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[
      { "id" : 1 },
      { "id" : 2 },
      { "id" : 3 }
      ]'

**Software Modules:**

- Reference:
  http://sp.apps.bosch-iot-cloud.com/documentation/rest-api/softwaremodules-api-guide.html

- List all software modules::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/softwaremodules' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' | jq .

- Create a new software module::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/softwaremodules' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ {
      "name" : "Zephyr Firmware",
      "vendor" : "Linaro",
      "description" : "Firmware Images for Zephyr",
      "type" : "os",
      "version" : "1.5"
      } ]'

- Delete a software module::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/softwaremodules/1' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -X DELETE

- List artifacts from a software module::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/softwaremodules/2/artifacts' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' | jq .

- Upload a new artifact to a software module::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/softwaremodules/2/artifacts' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: multipart/form-data' -X POST -F 'file=@/tmp/zephyr.hex'

- Download an artifact::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/softwaremodules/2/artifacts/1/download' -s -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Accept: application/octet-stream'

**Rollout:**

- Reference:
  http://sp.apps.bosch-iot-cloud.com/documentation/rest-api/rollout-api-guide.html

**Bootstrap Example**

- Create new target::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ {
      "controllerId" : "nitrogen123",
      "name" : "nitrogen123",
      "description" : "Nitrogen Description"
      } ]'

- Create new distribution set::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ {
      "name" : "Zephyr 17.01",
      "description" : "Zephyr 17.01 Build",
      "version" : "1.5",
      "requiredMigrationStep" : false,
      "type" : "os"
      } ]'

- Create new software module::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/softwaremodules' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ {
      "name" : "Zephyr Firmware",
      "vendor" : "Linaro",
      "description" : "Firmware Images for Zephyr",
      "type" : "os",
      "version" : "1.5"
      } ]'

- Upload artifact to the software module::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/softwaremodules/2/artifacts' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: multipart/form-data' -X POST -F 'file=@/tmp/zephyr.hex'

- Assign software module to the distribution set::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/distributionsets/1/assignedSM' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '[ { "id" : 1 } ]'

- Assign distribution set to the desired target::

      curl 'http://your-hawkbit-server.example.com:8080/rest/v1/targets/nitrogen123/assignedDS' -i -H 'Authorization: Basic YWRtaW46YWRtaW4=' -H 'Content-Type: application/json' -X POST -d '{
      "forcetime" : 1472465267347,
      "id" : 1,
      "type" : "timeforced"
      }'

  Now create a rollout.

.. _dm-hawkbit-mqtt-appendix-devices:

Additional IoT Devices
----------------------

96Boards Carbon
~~~~~~~~~~~~~~~

.. _Black Magic Debug Probe:
   https://github.com/blacksphere/blackmagic/wiki

.. _Segger JLink:
   https://www.segger.com/jlink_base.html

.. _96b_carbon_nrf51 flashing instructions:
   https://www.zephyrproject.org/doc/boards/arm/96b_carbon_nrf51/doc/96b_carbon_nrf51.html

There are two chips on the Carbon that need firmware, an STM32 and an
nRF51. The STM32 runs the bootloader and main FOTA application. The
nRF51 is a support chip which allows the application on the STM32 to
communicate with the IoT gateway via Bluetooth.

From the Genesis installation directory, build the main application
for the STM32::

  ./genesis build -b 96b_carbon zephyr-fota-samples/dm-hawkbit-mqtt

Then build another binary needed for the nRF51::

  ./genesis build -b 96b_carbon_nrf51 -c prj_96b_carbon_nrf51.conf \
                  --skip-signature zephyr/samples/bluetooth/hci_spi/

You'll need flashing tools to flash each of these chips.

- **dfu-util**
    - URL: http://dfu-util.sourceforge.net/
    - Git Repository: git://git.code.sf.net/p/dfu-util/dfu-util
    - This is used when flashing 96boards Carbon
- Flashing the Carbon nRF51 device requires an external SWD flashing
  tool, such as the `Black Magic Debug Probe`_ or `Segger JLink`_.

To flash the STM32, first put your Carbon into DFU mode by unplugging
it, then plugging it back in while the BOOT0 button is pressed.

Then, from the Genesis installation directory, run::

  ./genesis flash -b 96b_carbon zephyr-fota-samples/dm-hawkbit-mqtt

Next, flash the nRF51, which allows the STM32 you flashed earlier to
communicate with the IOT gateway via Bluetooth. Relative to the
Genesis installation directory, the firmware binary for the nRF51 is:

``outdir/zephyr/samples/bluetooth/hci_spi/96b_carbon_nrf51/app/zephyr.elf``

Before flashing this file, first **put your Carbon in DFU mode again**
to ensure the STM32 firmware does not interfere with the nRF51. Then
follow the Zephyr `96b_carbon_nrf51 flashing instructions`_ to flash
the binary.

FRDM-K64F
~~~~~~~~~

.. _FRDM-K64F:
   http://www.nxp.com/products/developer-resources/hardware-development-tools/freedom-development-boards/freedom-development-platform-for-kinetis-k64-k63-and-k24-mcus:FRDM-K64F

Building for FRDM-K64F requires some configuration information which
depends on your local network:

- An IP address to use for the IoT gateway
- Whether to use DHCP, or a static IP address to use for the board
  itself

This information must be written to the file
``zephyr-fota-samples/dm-hawkbit-mqtt/boards/frdm_k64f-local.conf`` in
the Genesis installation directory.

.. highlight:: none

To use DHCP, with gateway IP address A.B.C.D, create the file with the
following contents::

  CONFIG_NET_DHCPV4=y
  CONFIG_NET_APP_PEER_IPV4_ADDR="A.B.C.D"

To use a static IP address X.Y.Z.W for the FRDM-K64F instead::

  CONFIG_NET_APP_MY_IPV4_ADDR="X.Y.Z.W"
  CONFIG_NET_APP_PEER_IPV4_ADDR="A.B.C.D"

.. highlight:: sh

Now you can build the binaries. From the Genesis installation directory::

  ./genesis build -b frdm_k64f zephyr-fota-samples/dm-hawkbit-mqtt

.. include:: pyocd.include

To flash the binaries, plug the K64F into your system via the USB
connector labeled "SDA USB". Then, from the Genesis installation
directory::

    ./genesis flash -b frdm_k64f zephyr-fota-samples/dm-hawkbit-mqtt

.. _dm-hawkbit-mqtt-appendix-debian:

Generic Debian/Ubuntu Gateway Setup
-----------------------------------

Generic instructions follow for setting up a workstation or gateway
device running a Debian-based Linux distribution for use with the
:ref:`dm-hawkbit-mqtt-demo`.

Check kernel version
~~~~~~~~~~~~~~~~~~~~

The IoT gateway requires a kernel version 4.4+ due to the 6lowpan
requirements.

You can check your kernel version via::

   root@linaro-developer:~# uname -r
   4.9.0-35-arm64

Check / Update BlueZ stack
~~~~~~~~~~~~~~~~~~~~~~~~~~

Check your bluez version with the following command::

    sudo dpkg --status bluez | grep '^Version:'
    Version: 5.41-0ubuntu3

It is recommended that IoT gateway run BlueZ v5.41+.  It includes a
fix to a bug which causes the bluetooth stack to corrupt and require
an hci restart to fix.

Debian contains the following BlueZ packages:

- Jessie: 5.23-2 (This should be updated to the Stretch version)
- Stretch: 5.43-1

Ubuntu contains the following BlueZ packages (by version):

- xenial (16.04LTS): 5.37-0ubuntu5 (This should be updated to the version in yakkety)
- yakkety (16.10): 5.41-0ubuntu3

Install radvd (Router Advertisement Daemon)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

    sudo apt-get install radvd

    # (use the text editor of your choice to create the following config file)
    root@linaro-developer:~# cat /etc/radvd.conf
    interface bt0
    {
        IgnoreIfMissing on;
        AdvSendAdvert on;
        MinRtrAdvInterval 300;
        MaxRtrAdvInterval 600;
        AdvDefaultLifetime 7200;
        prefix fc00::/64
        {
            AdvOnLink off;
            AdvValidLifetime 36000;
            AdvPreferredLifetime 36000;
            AdvAutonomous on;
            AdvRouterAddr on;
        };
    };

Install ndppd
~~~~~~~~~~~~~

::

    sudo apt-get install ndppd

    # (use the text editor of your choice to create the following config file)
    root@linaro-developer:~# cat /etc/ndppd.conf
    route-ttl 30000
    proxy wlan0 {
        router yes
        timeout 500
        ttl 30000
        rule fc00:0:0:0:d4e7::/80 {
            static
        }
    }

Install tinyproxy
~~~~~~~~~~~~~~~~~

::

    sudo apt-get install tinyproxy

    # (use the text editor of your choice to create the following config file)
    root@linaro-developer:~# cat /etc/tinyproxy.conf
    User nobody
    Group nogroup
    Port 8080
    Timeout 600
    # TODO: Make this return a 30 second JSON wait response
    DefaultErrorFile "/usr/share/tinyproxy/default.html"
    StatFile "/usr/share/tinyproxy/stats.html"
    Logfile "/var/log/tinyproxy/tinyproxy.log"
    LogLevel Info
    PidFile "/var/run/tinyproxy/tinyproxy.pid"
    MaxClients 100
    MinSpareServers 10
    MaxSpareServers 30
    StartServers 20
    Allow fc00::/7
    Allow fe80::/64
    Allow ::1
    ViaProxyName "tinyproxy"
    ReversePath "/DEFAULT/"   "http://gitci.com:8080/DEFAULT/"
    ReverseOnly Yes

Set IP address for bt0 interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

    # (use the text editor of your choice to create the following config file)
    root@linaro-developer:~# cat /etc/network/interfaces.d/bt0
    auto bt0
    allow-hotplug bt0
    iface bt0 inet6 static
        address fc00:0:0:0:d4e7::1
        netmask 80

Setup sysctrl for router services
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

    # (use the text editor of your choice to create the following config file)
    root@linaro-developer:~# cat /etc/sysctl.d/gateway.conf
    # don't ignore RA on wlan0
    net.ipv6.conf.wlan.accept_ra=2
    # enable ip forwarding
    net.ipv6.conf.all.forwarding=1
    # enable IPv6 neighbour proxy, in case the 6lowpan needs to
    # share the same host IPv6 subnet
    net.ipv6.conf.all.proxy_ndp=1

Set Network Manager to ignore the bt0 interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create ``/etc/NetworkManager/conf.d/nm-bt0.conf``, and add::

    [keyfile]
    unmanaged-devices+=interface-name:bt0

Download bluetooth_6lowpand script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. todo:: bluetooth_6lowpand should be a versioned part of the
          release, here and below.

The attached script looks for Linaro FOTA IoT devices which are ready
to connect and auto attaches them via 6lowpan:

https://raw.githubusercontent.com/linaro-technologies/iot-gateway-files/master/bluetooth_6lowpand.sh

(OPTIONAL) Set the location of gitci.com in /etc/hosts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are running a local Hawkbit server, you will need to add an entry to the hosts file for gitci.com otherwise DNS will be used to locate the gitci.com server.

Reboot
~~~~~~

Reboot your machine.

Start the IoT gateway processes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To start the IoT gateway processes do the following::

    sudo service radvd start
    sudo service ndppd start
    # start the bluetooth_6lowpand script downloaded above
    sudo bash ./bluetooth_6lowpand.sh

.. _dm-hawkbit-mqtt-appendix-whitelist:

Whitelist Setup for IoT Gateway
-------------------------------

Instructions follow setting up a 6LoWPAN Bluetooth device whitelist
using the joiner script here:

https://raw.githubusercontent.com/linaro-technologies/iot-gateway-files/master/bluetooth_6lowpand.sh

.. warning::

   This guide assumes you are working on an IoT Gateway device such as
   a 96Boards Hikey using a prebuilt image from here:

   http://builds.96boards.org/snapshots/reference-platform/debian-iot/

   These images will include the above script as
   ``/usr/bin/bluetooth_6lowpand``

.. note::

   Prior to starting this walk through, please power off any IoT
   devices in your area.

Enable the whitelist feature
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To enable the whitelist, use the following commands::

    sudo service bluetooth_6lowpand stop
    sudo bluetooth_6lowpand --whitelist_on
    sudo bluetooth_6lowpand --whitelist_clear
    sudo service bluetooth_6lowpand start

How to Find Devices for the Whitelist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that the whitelist is enabled, you can find the beaconing devices
using the following command::

    sudo hcitool lescan

While leaving this command running, power on the IoT device
you wish to add to the whitelist. You should see an additional line
appear as each device is powered on.

The following is an example of the output from this command::

  LE Scan ...
  D6:E7:D2:E8:6C:9F (unknown)
  D6:E7:D2:E8:6C:9F Linaro IPSP node

Write down all of the "Linaro IPSP node" Bluetooth addresses, as you
will need these for the next steps.

Add a Device to the Whitelist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next, add each Bluetooth address to the whitelist with the following
command::

    # btaddress is formatted: ##:##:##:##:##:##
    sudo bluetooth_6lowpand --whitelist_add <btaddress>

As you run each command, you may notice that the bluetooth_6lowpand
service will join the device during its next scan.

.. note::

   **Once you've added all of the devices, you're done!  If you require
   no further changes, you can skip the rest of this guide.**

Additional Commands
~~~~~~~~~~~~~~~~~~~

List the devices in the whitelist
+++++++++++++++++++++++++++++++++

To list the devices currently in the bluetooth_6lowpand whitelist, use
the following command::

    sudo bluetooth_6lowpand --whitelist_list

Remove a device from the whitelist
++++++++++++++++++++++++++++++++++

To remove a device from the whitelist, use the following command::

    # btaddress is formatted: ##:##:##:##:##:##
    sudo bluetooth_6lowpand --whitelist_remove <btaddress>

.. note::

   If a device is currently joined to the 6lowpan network, it will be
   disconnected once this command is run.

Disable the whitelist feature
+++++++++++++++++++++++++++++

To turn off the whitelist feature, use the following commands::

    sudo service bluetooth_6lowpand stop
    sudo bluetooth_6lowpand --whitelist_off
    sudo service bluetooth_6lowpand start
